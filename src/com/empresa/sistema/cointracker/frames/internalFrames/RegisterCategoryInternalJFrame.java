/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.empresa.sistema.cointracker.frames.internalFrames;

import com.empresa.sistema.cointracker.entities.Category;
import java.util.ArrayList;
import com.empresa.sistema.ActionListener.RegisterCategoryActionListener;
import com.empresa.sistema.cointracker.entities.User;

/**
 *
 * @author Gabriel
 */
public class RegisterCategoryInternalJFrame extends javax.swing.JInternalFrame {
    
    RegisterCategoryActionListener actionListener;
    ArrayList<Category> categories;
    private Category category;
    int currentID;
    boolean editing = false;
    private User user;
    
    public RegisterCategoryInternalJFrame(ArrayList<Category> categories, User user) {
        this.user = user;
        initComponents();
        category = new Category();
        this.categories = categories;
        actionListener = new RegisterCategoryActionListener(this);
        AddActionListeners();
        SetAvailability(true);
        //InputID.setText(String.valueOf(categories.size() + 1));
    }
    
    public void SaveCategory(){
        getCategory().setDescription(inputDescription.getText());
        getCategory().setType(comboType.getSelectedItem().toString());
        if(!editing){
            getCategory().setId(categories.size());
          categories.add(getCategory()); 
        }
        Reset();
        currentID = categories.size();
        editing = false;
        SetAvailability(true);
        System.out.println("-------------------------------------------------");
        System.out.println("Saved Category["+categories.size()+"]:");
        System.out.println("ID:" + getCategory().getId());
        System.out.println("Description:" + getCategory().getDescription());
        System.out.println("Type:" + getCategory().getType());
        System.out.println("-------------------------------------------------");
    }
    
    public void Reset(){
        setCategory(new Category());
        inputDescription.setText("");
        comboType.setSelectedItem("Despesa");
    }
    
    public void Delete(){
        setCategory(categories.get(currentID));
        categories.remove(getCategory());
    }
    
    public void AddActionListeners(){
        buttonOK.addActionListener(actionListener);
        buttonBack.addActionListener(actionListener);
        buttonFoward.addActionListener(actionListener);
        buttonEdit.addActionListener(actionListener);
        buttonDelete.addActionListener(actionListener);
    }
    
    public void SetAvailability(boolean mode){
        if(mode){
            inputDescription.setEditable(true);
            comboType.setEnabled(true);
            buttonEdit.setEnabled(false);
            buttonDelete.setEnabled(false);
        }
        else{
            inputDescription.setEditable(false);
            comboType.setEnabled(false);
            buttonEdit.setEnabled(true);
            buttonDelete.setEnabled(true);
        }
    }
    
    public void Back(){
        if(currentID > 0){
            setCategory(categories.get(currentID - 1));
            inputDescription.setText(getCategory().getDescription());
            comboType.setSelectedItem(getCategory().getType());
            currentID -= 1;
            SetAvailability(false);
            System.out.println("-------------------------------------------------");
            System.out.println("Current Category: " + getCategory().getId());
            System.out.println("Description:" + getCategory().getDescription());
            System.out.println("Type:" + getCategory().getType());
            System.out.println("-------------------------------------------------");
        }
    }
    public void Forward(){
        if(currentID < categories.size() - 1){
            setCategory(categories.get(currentID + 1));
            inputDescription.setText(getCategory().getDescription());
            comboType.setSelectedItem(getCategory().getType());
            currentID += 1;
            SetAvailability(false);
            System.out.println("-------------------------------------------------");
            System.out.println("Current Category: " + getCategory().getId());
            System.out.println("Description:" + getCategory().getDescription());
            System.out.println("Type:" + getCategory().getType());
            System.out.println("-------------------------------------------------");
        }
    }
    
    public void Edit(){
        SetAvailability(true);
        setCategory(categories.get(currentID));
        editing = true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonEdit = new javax.swing.JButton();
        buttonBack = new javax.swing.JButton();
        buttonFoward = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        inputDescription = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        comboType = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        InputID = new javax.swing.JTextField();
        buttonOK = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();

        setClosable(true);

        buttonEdit.setActionCommand("Edit");
        buttonEdit.setText("Editar");

        buttonBack.setActionCommand("Back");
        buttonBack.setText("<<");

        buttonFoward.setActionCommand("Forward");
        buttonFoward.setText(">>");

        jLabel1.setText("Descrição");

        jLabel2.setText("Tipo");

        comboType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Despesa", "Receita" }));
        comboType.setToolTipText("");

        jLabel3.setVisible(false);
        jLabel3.setText("ID");

        InputID.setVisible(false);
        InputID.setEditable(false);

        buttonOK.setActionCommand("OK");
        buttonOK.addActionListener(this.actionListener);
        buttonOK.setText("Gravar");

        buttonDelete.setActionCommand("Delete");
        buttonDelete.setText("Excluir");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel3)
                                .addComponent(jLabel1)
                                .addComponent(inputDescription)
                                .addComponent(comboType, 0, 171, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addComponent(InputID))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(buttonBack)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonFoward)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 65, Short.MAX_VALUE)
                        .addComponent(buttonDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonOK)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonBack)
                    .addComponent(buttonFoward))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(InputID, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboType, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonOK)
                    .addComponent(buttonEdit)
                    .addComponent(buttonDelete))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField InputID;
    private javax.swing.JButton buttonBack;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonEdit;
    private javax.swing.JButton buttonFoward;
    private javax.swing.JButton buttonOK;
    private javax.swing.JComboBox<String> comboType;
    private javax.swing.JTextField inputDescription;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables

    public Category getCategory() {
        return category;
    }

    public void setCategory(Category category) {
        this.category = category;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }
}
